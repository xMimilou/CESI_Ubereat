import { PropType } from 'vue';
import { GoogleChartWrapperChartType, GoogleChartOptions, GoogleChartVersion, GoogleChartLoaderOptions, GoogleVizEvents, GoogleDataTable } from '../types';
import { ICreateChartFunction } from '../utils';
export declare const GChart: import("vue").DefineComponent<{
    type: {
        type: PropType<GoogleChartWrapperChartType>;
        required: true;
    };
    data: {
        type: PropType<GoogleDataTable | Record<string, any> | unknown[][] | null>;
        default: () => never[];
    };
    isFirstRowLabels: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: PropType<GoogleChartOptions>;
        default: () => {};
    };
    version: {
        type: PropType<GoogleChartVersion>;
        default: string;
    };
    settings: {
        type: PropType<GoogleChartLoaderOptions>;
        default: () => {
            packages: string[];
        };
    };
    events: {
        type: PropType<GoogleVizEvents | null>;
        default: null;
    };
    createChart: {
        type: PropType<ICreateChartFunction>;
        default: undefined;
    };
    resizeDebounce: {
        type: NumberConstructor;
        default: number;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: PropType<GoogleChartWrapperChartType>;
        required: true;
    };
    data: {
        type: PropType<GoogleDataTable | Record<string, any> | unknown[][] | null>;
        default: () => never[];
    };
    isFirstRowLabels: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: PropType<GoogleChartOptions>;
        default: () => {};
    };
    version: {
        type: PropType<GoogleChartVersion>;
        default: string;
    };
    settings: {
        type: PropType<GoogleChartLoaderOptions>;
        default: () => {
            packages: string[];
        };
    };
    events: {
        type: PropType<GoogleVizEvents | null>;
        default: null;
    };
    createChart: {
        type: PropType<ICreateChartFunction>;
        default: undefined;
    };
    resizeDebounce: {
        type: NumberConstructor;
        default: number;
    };
}>>, {
    events: GoogleVizEvents | null;
    options: GoogleChartOptions;
    data: GoogleDataTable | Record<string, any> | unknown[][] | null;
    isFirstRowLabels: boolean;
    version: GoogleChartVersion;
    settings: GoogleChartLoaderOptions;
    createChart: ICreateChartFunction;
    resizeDebounce: number;
}>;
//# sourceMappingURL=GChart.d.ts.map